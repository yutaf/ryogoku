#!/usr/bin/env bash

VERSION="1.1.0"
CONFIG=ryogoku.conf
ENV=
REF=
ARG_PATH=
EXCLUDE_FILE=rsync-exclude
# -u (--update) is not good for rollback
RSYNC_OPTION="-rlpDvcK --delete --safe-links"
DRYRUN=0
BUILD_IN_CURRENT_DIR=0
DELETE_DEST=0
PARALLEL=10

EXIT_STATUS_CONFIG_SECTION_NOT_DEFINED=91

RED=31
GREEN=32
YELLOW=33
BLUE=34

#
# Output usage information.
#
usage() {
  cat <<-EOF
  Usage: ryogoku [options] <env> [command]

  * default rsync option is "$RSYNC_OPTION"
  * default rsync's "--exclude-from=" path is REPOSITORY-ROOT/${EXCLUDE_FILE}
  * config file path is REPOSITORY-ROOT/${CONFIG}

  Options:

    -V, --version               output program versions
    -h, --help                  output help information
    -n, --dry-run               show what would have been transferred
    -p, --path <path>           specify path value
    -P <n>                      Set max number of parallel execution. default: $PARALLEL
    -c, --build-in-current-dir  build src in currnet directory, not in tmp cloned directory
    -d, --delete-dest           delete destination path post deployment

  Commands:

    init                        create config files
    update                      update ryogoku to the latest release
    envs                        list all env names
    list                        list previous deploy commits
    [ref]                       deploy indicated [ref]
    revert [n]                  revert to [n]th last deployment or 1
    config_get <directive>      print specified config value
    setup_remote_ssh <env>      Add remote env's public key to deployment host(s)'s authorized_keys
EOF
}

#
# Abort with <msg>.
#
abort() {
  echo
  cecho $RED "  $@" 1>&2
  echo
  exit 1
}

#
# echo with <color>.
#
cecho() {
    color=$1
    shift
    echo -e "\033[${color}m$@\033[m"
}

#
# Log <msg>.
#
log() {
  cecho $YELLOW "  ○ $@"
}

#
# Warn <msg>.
#
warn() {
  cecho $RED "  ○ $@"
}

#
# Check if config <section> exists.
#
config_section() {
  grep "^\[$1\]" $CONFIG &> /dev/null
}

#
# Get config value by <directive>.
#
config_get() {
  local nr_env=$(nl -b a $CONFIG | grep -m 1 "\[$ENV\]" | cut -f 1 | sed 's/ *//g')
  local nr_next_env=$(awk -v nr_env=$nr_env 'NR > nr_env && /^\[/ { print NR; exit }' $CONFIG)
  test -z "$nr_next_env" && nr_next_env='$'

  local directive=$1
  test -n "$directive" \
    && sed -n "${nr_env}, ${nr_next_env}p" $CONFIG \
    | grep "^$directive" \
    | head -n 1 \
    | cut -s -d ' ' -f 2-
}

#
# Output version.
#
version() {
  echo $VERSION
}

#
# Get ssh host list.
#
get_ssh_list() {
  echo $(config_get host) | awk -v user="$(config_get user)" '{
    for(i=1; i<=NF; i++) {
      if($i ~ /^[^@]+@[^@]+$/) {
        print $i
      } else {
        host = (user ~ /^$/)? $i : user"@"$i;
        print host
      }
    }
  }'
}

#
# Execute command via ssh to all the hosts.
#
ssh_command() {
  get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % "$@"
}

#
# Execute command via ssh to one host only.
#
ssh_command_single() {
  local url=$(get_ssh_list | head -n 1)
  echo "ssh $(get_ssh_options) $url $@"
  ssh $(get_ssh_options) $url $@
}

#
# Get ssh options.
#
get_ssh_options(){
  local key=$(config_get key)
  local forward_agent=$(config_get forward-agent)
  local port_num=$(config_get port)
  local needs_tty=$(config_get needs_tty)

  test -n "$forward_agent" && local agent="-A"
  test -n "$key" && local identity="-i $key"
  test -n "$port_num" && local port="-p $port_num"
  test -n "$needs_tty" && local tty="-t"

  echo $tty $agent $port $identity
}

#
# Get <n>th deploy commit.
#
nth_deploy_commit() {
  local n=$1
  if test -n "$ARG_PATH"; then
    local path=$ARG_PATH
  else
    local path=$(config_get path)
  fi
  ssh_command_single "nl $path/.deploys | sort -nr | awk -v n=$n 'NR==n { print \$2 }'"
}

#
# Revert to the <n>th last deployment.
#
revert_to() {
  local n=$1
  log "reverting $n deploy(s)"
  local commit=`nth_deploy_commit $((n + 1))`
  test -z $commit && abort invalid revert value $n
  deploy "$commit"
}

#
# List deploys.
#
list_deploys() {
  if test -n "$ARG_PATH"; then
    local path=$ARG_PATH
  else
    local path=$(config_get path)
  fi
  ssh_command_single "nl $path/.deploys | sort -nr | cut -f 2-"
}

#
# Update ryogoku
#
update() {
  log "updating ryogoku(1)"
  local tmp=$(mktemp -u 2>/dev/null || mktemp -u -t $$ 2>/dev/null || echo /var/tmp/$$)
  git clone git://github.com/yutaf/ryogoku.git \
    --depth 1 \
    $tmp \
  && cd $tmp \
  && make install \
  && log "updated $VERSION -> `./bin/ryogoku --version`"
  rm -rf $tmp
}

#
# Initialize
#
init() {
  git rev-parse 2> /dev/null || abort not a git repository
  local config=$(git rev-parse --show-cdup)${CONFIG}
  test -e $config || {
    cat <<-EOF > $config
[env]
user 
host 
key 
port 
src 
path 
ref 
rsync-option 
pre-rsync 
pre-deploy 
post-deploy 
umask 
EOF
    log create $config
  }

  local exclude_file=$(git rev-parse --show-cdup)${EXCLUDE_FILE}
  test -e $exclude_file || {
    touch $exclude_file
    log create $exclude_file
  }
}

#
# List all env names.
#
envs() {
  set -o pipefail
  grep '^\[[^]]*]$' $(git rev-parse --show-cdup)$CONFIG | sed 's/\[\([^]]*\)\]/\1/g'
  exit $?
}

#
# Deploy [ref].
#
deploy() {
  # path
  if test -n "$ARG_PATH"; then
    local path=$ARG_PATH
  else
    local path=$(config_get path)
  fi

  if test $DRYRUN -eq 1; then
    log DRYRUN MODE
  else
    log deploying
  fi

  log "check ssh connection"
  if test $DRYRUN -eq 1; then
    ssh_command_single :
  else
    get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % :
  fi
  test $? -eq 0 || abort ssh failed

  if test -n "$(config_get build_in_current_dir)"; then
    BUILD_IN_CURRENT_DIR=1
  fi

  # set tmp
  local tmp=
  if test $BUILD_IN_CURRENT_DIR -eq 1; then
    tmp=.
  else
    # define unique name;
    # get directory name from the parent to the three layer above and replace '/' wiht '-SLASH-'
    local ryogoku_dir_name=$(pwd | grep -oe '[^/]*/[^/]*/[^/]*$' | sed 's;^/;;g' | sed 's;/;-SLASH-;g')
    tmp=/var/tmp/ryogoku/${ryogoku_dir_name}
  fi

  if test $BUILD_IN_CURRENT_DIR -ne 1; then
    # create tmp
    test -d "$tmp" || mkdir -p $tmp

    # export
    local umask_value=$(config_get umask)
    test -n "$umask_value" && umask $umask_value
    local repository=$(pwd)
    (cd $tmp; git rev-parse 2> /dev/null)
    if test $? -ne 0; then
      (cd $tmp; git clone $repository .) || abort failed to clone
    fi

    # check remote url
    local remote_url=$(cd $tmp > /dev/null 2>&1 && git remote -v | grep -m 1 ^origin | cut -f 2 | cut -d ' ' -f 1)
    if test "$repository" != "$remote_url"; then
      log working directory path changed. clone again from the new path.
      rm -rf $tmp
      mkdir -p $tmp
      (cd $tmp; git clone $repository .) || abort failed to clone
    fi

    # fetch source
    log fetching updates
    (cd $tmp; git fetch --all --prune)
    test $? -eq 0 || abort fetch failed
  fi

  # set ref
  local ref_arg=$1
  if test -z "$ref_arg"; then
    # fetch branch name
    ref_arg=$(git rev-parse --abbrev-ref HEAD)
  fi

  ref=$(git rev-parse --short $ref_arg)
  test $? -eq 0 || abort invalid ref \`$ref_arg\`

  if test $BUILD_IN_CURRENT_DIR -ne 1; then
    # reset HEAD
    log resetting HEAD to $ref
    (cd $tmp; git reset --hard $ref)
    test $? -eq 0 || abort git reset failed
  fi

  # clean
  log clean
  (cd $tmp; git clean -d -f)

  # pre-rsync
  local cmd_pre_rsync=$(config_get pre-rsync)
  if test -n "$cmd_pre_rsync"; then
    log "executing pre-rsync \`$cmd_pre_rsync\`"
    (cd $tmp; eval $cmd_pre_rsync)
    test $? -eq 0 || abort pre-rsync failed
  fi

  # pre-deploy
  if test $DRYRUN -ne 1; then
    local cmd_pre_deploy=$(config_get pre-deploy)
    if test -n "$cmd_pre_deploy"; then
      log "executing pre-deploy \`$cmd_pre_deploy\`"

      local cmd_pre_deploy_exe=

      for str in $cmd_pre_deploy; do
        local cmd=$str
        test -x "$str" && cmd="$(cat $str)"
        cmd_pre_deploy_exe=${cmd_pre_deploy_exe}" "${cmd}
      done

      get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % "cd $path && eval \"$cmd_pre_deploy_exe\""
      test $? -eq 0 || abort pre-deploy failed
    fi
  fi

  #
  # rsync
  #
  local rsync_option=$(config_get rsync-option)
  test -n "$rsync_option" && RSYNC_OPTION=$rsync_option

  local exclude_file=$(config_get rsync-exclude)
  # Cut initail "./"
  test -n "$exclude_file" && EXCLUDE_FILE=$(echo $exclude_file | sed 's;^\./;;')

  local exclude_from=
  test -f $EXCLUDE_FILE && exclude_from="--exclude-from=$EXCLUDE_FILE --exclude=$EXCLUDE_FILE"

  # src
  local src_dir=
  local src=$(config_get src)
  if test -n "$src"; then
    src_dir=${tmp}/$(echo $src | sed 's;^\./;;' | sed 's;^/;;')
  else
    src_dir=$tmp
  fi
  src_dir=$(echo $src_dir | sed 's;[^/]$;&/;')
  test -d "$src_dir" || abort invalid src value: \"${src}\"

  # rsync ssh option
  local key=$(config_get key)
  test -n "$key" && local key_option="-i $key"
  local port=$(config_get port)
  test -n "$port" && local port_option="-p $port"
  if test -n "$key" -o -n "$key"; then
    # -e option not working with xargs command
#    rsync_ssh_option="-e \"ssh $key_option $port_option\""
    # use RSYNC_RSH instad of -e option
    export RSYNC_RSH="ssh $key_option $port_option"
  fi

  # execute rsync
  log rsync

  if test $DRYRUN -eq 1; then
    local cmd_rsync="rsync $RSYNC_OPTION --dry-run --exclude=/.deploys --exclude=$CONFIG $exclude_from ${src_dir} $(get_ssh_list | head -n 1):$path"
    log dry run
    echo $cmd_rsync
    echo
    eval $cmd_rsync
    exit
  fi

  if test $DELETE_DEST -eq 1; then
    # Handle Script Errors.
    trap "log delete dest && ssh_command rm -rf $path" EXIT
  fi

  get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % rsync $RSYNC_OPTION --exclude=/.deploys --exclude=$CONFIG $exclude_from ${src_dir} %:$path
  test $? -eq 0 || abort rsync failed

  # deploy log
  log "deploy log"
  local timestamp=$(git --no-pager log -n 1 --pretty="%at" $ref)
  local date=$(perl -e "use POSIX qw(strftime); print strftime( '%Y-%m-%d %H:%M' , localtime($timestamp))")
  local deploy_log=$(git --no-pager log -n 1 --pretty="%h $date %<(20)%an ● %s" $ref)
  #local deploy_log=$(git --no-pager log -n 1 --date=short --pretty='%h %ad %<(20)%an ● %s' $ref)

  get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % "echo \"$deploy_log\" >> $path/.deploys"
  test $? -eq 0 || warn deploy log append failed

  local cmd_post_deploy=$(config_get post-deploy)
  if test -n "$cmd_post_deploy"; then
    log "executing post-deploy \`$cmd_post_deploy\`"
    get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % "cd $path && eval $cmd_post_deploy"
    test $? -eq 0 || abort post-deploy failed
  fi

  # done
  log successfully deployed $ref
  exit 0
}

#
# Add remote env's public key to deployment host(s)'s authorized_keys
#
setup_remote_ssh() {
  local env=$ENV
  local env_remote=$1
  test -z "$env_remote" && abort please pass the remote \<env\>

  ENV=$env_remote
  require_env
  # get public key
  local remote_public_key_path=$(config_get key)
  test -z "$remote_public_key_path" && remote_public_key_path='$HOME/.ssh/id_rsa.pub'
  local remote_public_key=$(ssh_command_single cat $remote_public_key_path)

  test -z "$remote_public_key" && abort failed to get webhook public key
  # disable known_hosts check
#  ssh_command_single "grep 'StrictHostKeyChecking no' \$HOME/.ssh/config >/dev/null 2>&1 || { echo 'StrictHostKeyChecking no' >> \$HOME/.ssh/config; chmod 600 \$HOME/.ssh/config; }"

  ENV=$env
  get_ssh_list | xargs -t -n $PARALLEL -P $PARALLEL -I % ssh $(get_ssh_options) % "grep '$remote_public_key' \$HOME/.ssh/authorized_keys >/dev/null 2>&1 || echo $remote_public_key >> \$HOME/.ssh/authorized_keys"
  test $? -eq 0 || abort failed to add webhook public key to authorized_keys

  local ssh_list=$(get_ssh_list)
  ENV=$env_remote
  for host in $ssh_list; do
    ssh_command_single "ssh $host echo && echo Connected to $host"
    test $? -eq 0 || abort [$ENV] failed to ssh to $host
    echo
  done
}

#
# Require environment arg.
#
require_env() {
  config_section $ENV || { cecho $RED "[$ENV] config section not defined" 1>&2; exit $EXIT_STATUS_CONFIG_SECTION_NOT_DEFINED; }
  test -z "$ENV" && abort "<env> required"
}

#
# Ensure all changes are committed and pushed before deploying.
#
check_for_local_changes() {
  git --no-pager diff --exit-code --quiet          || abort "commit or stash your changes before deploying"
  git --no-pager diff --exit-code --quiet --cached || abort "commit your staged changes before deploying"
  if test $DRYRUN -ne 1; then
    [ -z "`git rev-list @{upstream}.. -n 1`" ]       || abort "push your changes before deploying"
  fi
}

# parse argv
test $# -eq 0 && { usage; exit 1; }

while test $# -ne 0; do
  arg=$1; shift
  case $arg in
    -h|--help) usage; exit ;;
    -V|--version) version; exit ;;
    -n|--dry-run) DRYRUN=1 ;;
    -c|--build-in-current-dir) BUILD_IN_CURRENT_DIR=1 ;;
    -d|--delete-dest) DELETE_DEST=1 ;;
    -p|--path) ARG_PATH=$1; shift ;;
    -P) PARALLEL=$1; shift ;;
    revert) require_env; revert_to ${1:-1}; exit ;;
    list) require_env; list_deploys; exit ;;
    setup_remote_ssh) require_env; setup_remote_ssh $@; exit ;;
    config_get) require_env; config_get $1; exit ;;
    update) update; exit ;;
    init) init; exit ;;
    envs) envs; exit ;;
#    ssh_command) ssh_command $@; exit ;;
#    ssh_command_single) ssh_command_single $@; exit ;;
    *)
      if test -z "$ENV"; then
        ENV=$arg
      else
        REF="$REF $arg";
      fi
      ;;
  esac
done

# move to repository root
cd $(git rev-parse --show-toplevel)

require_env
check_for_local_changes

# deploy
deploy "${REF:-$(config_get ref)}"
